" Set the fold format {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
" }
" General { 
let mapleader = " "
" buffer management
nnoremap <space>w :write<cr>
nnoremap <leader>so :so ~/.vimrc<cr>
" nnoremap <leader>m :!mocha -GC<cr>
augroup filetype_javascript
    autocmd!
    "   autocmd BufWritePost *.js !mocha -C 
    " autocmd BufWritePost *.js !npm test
    autocmd User Node if &filetype == "javascript" | setlocal expandtab | endif
    autocmd User Node
                \ if &filetype == "javascript" |
                \   nmap <buffer> <C-w>f <Plug>NodeVSplitGotoFile |
                \   nmap <buffer> <C-w><C-f> <Plug>NodeVSplitGotoFile |
                \ endif
augroup END
" http://oli.me.uk/2013/06/29/equipping-vim-for-javascript/
imap <C-c> <CR><Esc>O
" }
" Buffer Mgmt {
nnoremap <leader>l :bnext<cr>
nnoremap <leader>j :bprev<cr>
nnoremap <leader>d :bdelete<cr>
nnoremap <space>o :only<cr>

" }
" { Ack
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>
" bind \ (backward slash) to grep shortcut
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>
" }
" Unite config {
nnoremap <leader>s :Unite -quick-match buffer<cr>
nnoremap <leader>f :Unite file<cr>
nnoremap <leader>p :Unite -start-insert file_rec/async<cr>
nnoremap <leader>nu :Unite neobundle/update<cr>
" }
" { Paste to Gist
xnoremap <space>g :Gist<cr>
" }
" { CoffeeScript
nnoremap <space>cw :CoffeeCompile watch vert<cr>
nnoremap <leader>c :CoffeeCompile vert<cr>
" }
" Tern{
" go to definition for javascript
nnoremap <leader>gd :TernDef<cr>
" get type
nnoremap <leader>gt :TernType<cr>
" }
" Numbers.Vim{
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>
" }
" QuickFix Window {
" close window
nnoremap <space>q :ccl<cr>
map <Leader>cc :cwindow<CR>:cc<CR><c-w>bz<CR><CR>
" }
" rspec {
" http://robots.thoughtbot.com/running-specs-from-vim
" let g:rspec_command_launcher = "iterm"
nnoremap <Leader>t :call RunCurrentSpecFile()<CR>
nnoremap <Leader>rs :call RunNearestSpec()<CR>
nnoremap <Leader>rl :call RunLastSpec()<CR>
" }
" go {
nnoremap <leader>gd :GoDoc<CR>
au FileType go nmap <leader>df <Plug>(go-def)
" au Filetype go nmap <leader>gb <Plug>(go-build)
au Filetype go set makeprg=go\ build\ ./...
nmap <leader>gb :make<CR>
" }
